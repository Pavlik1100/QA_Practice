{
	"info": {
		"_postman_id": "efeaab5a-8957-45b5-aa3b-729618e59269",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1) first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Code 200 OK\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Response has desired text\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}first",
					"host": [
						"{{url}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2) user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name s request\", () => {\r",
							"    const nameReq = request.data.name;\r",
							"    pm.expect(jsonData.name).to.eql(nameReq);    \r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Age s request\", () => {\r",
							"    const ageReq = request.data.age;\r",
							"    pm.expect(jsonData.age).to.eql(ageReq);\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary s request\", () => {\r",
							"    const salaryReq = request.data.salary;\r",
							"    pm.expect(jsonData.salary).to.eql(parseInt(salaryReq));\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"const jsonData_req = request.data;\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name from response matches Name from request\", () =>{\r",
							"    pm.expect(jsonData.name).to.eql(jsonData_req.name);    \r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age from response matches Age from request\", () => {\r",
							"    pm.expect(jsonData.age).to.eql(jsonData_req.age);\r",
							"})\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary from response matches Salary from request\", () => {\r",
							"    pm.expect(jsonData.salary).to.eql(parseInt(jsonData_req.salary));\r",
							"})\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year from response matches salary*4 from request\", () => {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql((jsonData_req.salary)*4);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Pasha",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3) object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"const respJson = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"let reqJson = {};\r",
							"pm.request.url.query.all().forEach((param) => {\r",
							"    reqJson[param.key]=param.value\r",
							"});\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name from response matches Name from request\", () => {\r",
							"    pm.expect(respJson.name).to.eql(reqJson.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age frim response matches Age from request\", () => {\r",
							"    pm.expect(respJson.age).to.eql(reqJson.age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary from response matches Salary from request\", () => {\r",
							"    pm.expect(respJson.salary).to.eql(parseInt(reqJson.salary));\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(respJson.family);\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Property dog include property name\", () => {\r",
							"    pm.expect(respJson.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Property dog include property age\", () => {\r",
							"    pm.expect(respJson.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Property name matchs Luky\", () => {\r",
							"    pm.expect(respJson.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Propery age matches 4\", () => {\r",
							"    pm.expect(respJson.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_3?name=Pasha&age=28&salary=1000",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Pasha"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4) object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"const jsonRes = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"let jsonReq = {};\r",
							"pm.request.url.query.all().forEach((param) => {\r",
							"    jsonReq[param.key]=param.value\r",
							"});\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name from response matches Name from request\", () => {\r",
							"    pm.expect(jsonRes.name).to.eql(jsonReq.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age from response matches Age from request\", () => {\r",
							"    pm.expect(parseInt(jsonReq.age)).to.eql(jsonRes.age);\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(jsonReq.salary);\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonRes.salary);\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonRes.salary[0]);\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonRes.salary[1]);\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonRes.salary[2]);\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Property salary[0] from response matches property from salary request\", () => {\r",
							"    pm.expect(parseInt(jsonReq.salary)).to.eql(jsonRes.salary[0]);\r",
							"});\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Property salary[1] from response matches property from salary request x 2\", () => {\r",
							"    pm.expect(parseInt(jsonReq.salary)*2).to.eql(parseInt(jsonRes.salary[1]));\r",
							"});\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Property salary[2] from response matches property from request x 3\", () => {\r",
							"    pm.expect(parseInt(jsonReq.salary)*3).to.eql(parseInt(jsonRes.salary[2]));\r",
							"});\r",
							"\r",
							"//15. Создать в окружении переменную name\r",
							"const name_res = jsonRes.name;\r",
							"\r",
							"//16. Создать в окружении переменную age\r",
							"const age_res = jsonRes.age;\r",
							"\r",
							"//17. Создать в окружении переменную salary\r",
							"const salary_res = jsonRes.salary[0];\r",
							"\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", name_res);\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", age_res);\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", salary_res);\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let sal in jsonRes.salary){\r",
							"    console.log('salary element '+ sal + ' - ' + jsonRes.salary[sal]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name=Pasha&age=28&salary=1000",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Pasha"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5) user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//4. Отправить запрос.\r",
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6. Спарсить response body в json.\r",
							"const Res = pm.response.json();\r",
							"\r",
							"//7. Спарсить request.\r",
							"const Req = request.data;\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Response JSON have property start_qa_salary\", () => {\r",
							"    pm.expect(Res).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Response JSON have property qa_salary_after_6_months\", () => {\r",
							"    pm.expect(Res).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Response JSON have property qa_salary_after_12_months\", () => {\r",
							"    pm.expect(Res).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Response JSON have property qa_salary_after_1.5_year\", () => {\r",
							"    pm.expect(Res).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Response JSON have propery qa_salary_after_3.5_years\", () => {\r",
							"    pm.expect(Res).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Response JSON have property person\", () => {\r",
							"    pm.expect(Res).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary from response matches salary from request\", () => {\r",
							"    const salary = Req.salary;\r",
							"    pm.expect(Res.start_qa_salary).to.eql(salary);\r",
							"});\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months from response matches salary x2 from request\", () => {\r",
							"    const salary = Req.salary*2;\r",
							"    pm.expect(Res.qa_salary_after_6_months).to.eql(salary);\r",
							"});\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months from response matches salary x2.7 from request\", () => {\r",
							"    const salary = Req.salary*2.7;\r",
							"    pm.expect(Res.qa_salary_after_12_months).to.eql(salary);\r",
							"});\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year from response matches salary x3.3 from request\", () => {\r",
							"    const salary = Req.salary*3.3;\r",
							"    const salary_res = Res[\"qa_salary_after_1.5_year\"];\r",
							"    pm.expect(salary_res).to.eql(salary);\r",
							"});\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years from response matches salary from request\", () => {\r",
							"    const salary = Req.salary*3.8;\r",
							"    const salary_res = Res[\"qa_salary_after_3.5_years\"];\r",
							"    pm.expect(salary_res).to.eql(salary);\r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary from u_name property person from response matches salary from request\", () => {\r",
							"    const salary = Req.salary;\r",
							"    const salary_res = Res.person.u_name[1];\r",
							"    pm.expect(salary).to.eql(salary_res);\r",
							"});\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age from property person from response matches name from request\", () => {\r",
							"    const age = Req.age;\r",
							"    const age_res = Res.person.u_age;\r",
							"    pm.expect(age).to.eql(age_res);\r",
							"})\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years from property person matches salary x4.2 from request\", () => {\r",
							"    const salary = Req.salary * 4.2;\r",
							"    const salary_res = Res.person.u_salary_5_years;\r",
							"    pm.expect(salary).to.eql(salary_res);\r",
							"})\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let pers in Res.person) {\r",
							"    if (Array.isArray(Res.person[pers])) {\r",
							"         for (let nam in Res.person.u_name) {        \r",
							"            console.log(pers + \" - \" + Res.person.u_name[nam]);\r",
							"        }\r",
							"    }\r",
							"    else {\r",
							"        console.log(pers + \" - \" + Res.person[pers]);\r",
							"    }    \r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"pm.request.body.formdata.add({\r",
							"    key: \"salary\",\r",
							"    value: pm.environment.get(\"salary\")\r",
							"});\r",
							"\r",
							"//2. Вставить параметр age из окружения в age\r",
							"pm.request.body.formdata.add({\r",
							"    key: \"age\",\r",
							"    value: pm.environment.get(\"age\")\r",
							"});\r",
							"\r",
							"//3. Вставить параметр name из окружения в name\r",
							"pm.request.body.formdata.add({\r",
							"    key: \"name\",\r",
							"    value: pm.environment.get(\"name\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "name",
			"value": ""
		}
	]
}